 Write a program to search a given element in a set of N numbers using Binary search
(i) with recursion (ii) without recursion
#include <iostream>
using namespace std;

// (i) Binary Search using Recursion
int binarySearchRecursive(int arr[], int left, int right, int key) {
    if (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == key)
            return mid;
        else if (arr[mid] > key)
            return binarySearchRecursive(arr, left, mid - 1, key);
        else
            return binarySearchRecursive(arr, mid + 1, right, key);
    }
    return -1;
}

// (ii) Binary Search without Recursion (Iterative)
int binarySearchIterative(int arr[], int size, int key) {
    int left = 0, right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == key)
            return mid;
        else if (arr[mid] > key)
            right = mid - 1;
        else
            left = mid + 1;
    }
    return -1;
}

int main() {
    int n, key;

    cout << "Enter the number of elements (sorted): ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " sorted elements:\n";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    cout << "Enter the element to search: ";
    cin >> key;

    // Recursive Binary Search
    int indexRec = binarySearchRecursive(arr, 0, n - 1, key);
    if (indexRec != -1)
        cout << "Element found at index " << indexRec << " using recursive binary search.\n";
    else
        cout << "Element not found using recursive binary search.\n";

    // Iterative Binary Search
    int indexItr = binarySearchIterative(arr, n, key);
    if (indexItr != -1)
        cout << "Element found at index " << indexItr << " using iterative binary search.\n";
    else
        cout << "Element not found using iterative binary search.\n";

    return 0;
}
