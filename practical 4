Write a menu driven program to perform string manipulation (without using inbuilt
string functions):
a. Show address of each character in string
b. Concatenate two strings.
c. Compare two strings
d. Calculate length of the string (use pointers)
2
e. Convert all lowercase characters to uppercase
f. Reverse the string
g. Insert a string in another string at a user specified position
code
#include <iostream>
using namespace std;

void showAddress(char* str) {
    int i = 0;
    while (*(str + i) != '\0') {
        cout << "Character: " << *(str + i) << " | Address: " << (void*)(str + i) << endl;
        i++;
    }
}

void concatenate(char* str1, char* str2, char* result) {
    int i = 0, j = 0;
    while (str1[i] != '\0') {
        result[i] = str1[i];
        i++;
    }
    while (str2[j] != '\0') {
        result[i++] = str2[j++];
    }
    result[i] = '\0';
}

int compareStrings(char* str1, char* str2) {
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i])
            return (str1[i] > str2[i]) ? 1 : -1;
        i++;
    }
    if (str1[i] == '\0' && str2[i] == '\0') return 0;
    return (str1[i] == '\0') ? -1 : 1;
}

int stringLength(char* str) {
    int len = 0;
    while (*(str + len) != '\0') {
        len++;
    }
    return len;
}

void toUppercase(char* str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] >= 'a' && str[i] <= 'z') {
            str[i] = str[i] - ('a' - 'A');
        }
    }
}

void reverseString(char* str) {
    int len = stringLength(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

void insertString(char* base, char* insert, int pos, char* result) {
    int i = 0, j = 0, k = 0;

    // Copy base till position
    while (i < pos && base[i] != '\0') {
        result[k++] = base[i++];
    }

    // Insert new string
    while (insert[j] != '\0') {
        result[k++] = insert[j++];
    }

    // Copy remaining base string
    while (base[i] != '\0') {
        result[k++] = base[i++];
    }

    result[k] = '\0';
}

int main() {
    char str1[100], str2[100], result[200];
    int choice, pos;

    cout << "Enter first string: ";
    cin.getline(str1, 100);

    do {
        cout << "\n--- Menu ---\n";
        cout << "1. Show address of each character in string\n";
        cout << "2. Concatenate two strings\n";
        cout << "3. Compare two strings\n";
        cout << "4. Calculate length of the string\n";
        cout << "5. Convert all lowercase to uppercase\n";
        cout << "6. Reverse the string\n";
        cout << "7. Insert string at specified position\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // clear newline from buffer

        switch (choice) {
            case 1:
                showAddress(str1);
                break;
            case 2:
                cout << "Enter second string: ";
                cin.getline(str2, 100);
                concatenate(str1, str2, result);
                cout << "Concatenated String: " << result << endl;
                break;
            case 3:
                cout << "Enter second string: ";
                cin.getline(str2, 100);
                {
                    int cmp = compareStrings(str1, str2);
                    if (cmp == 0)
                        cout << "Strings are equal.\n";
                    else if (cmp < 0)
                        cout << "First string is less than second.\n";
                    else
                        cout << "First string is greater than second.\n";
                }
                break;
            case 4:
                cout << "Length of the string: " << stringLength(str1) << endl;
                break;
            case 5:
                toUppercase(str1);
                cout << "String in uppercase: " << str1 << endl;
                break;
            case 6:
                reverseString(str1);
                cout << "Reversed string: " << str1 << endl;
                break;
            case 7:
                cout << "Enter string to insert: ";
                cin.getline(str2, 100);
                cout << "Enter position to insert at: ";
                cin >> pos;
                cin.ignore();
                insertString(str1, str2, pos, result);
                cout << "Resultant string: " << result << endl;
                break;
            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }

    } while (choice != 8);

    return 0;
}
